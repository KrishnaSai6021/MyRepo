/*
 * Copyright 2018, FMR LLC.
 * All Rights Reserved.
 * Fidelity Confidential Information
 */
package com.fmr.batch.ecp.processor;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import com.fmr.batch.ecp.service.S3Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * The Class FirstStepProcessor.
 */
public class FirstStepTasklet implements Tasklet
{
	private String inputBucket;
	private String inputKey;
	private S3Service s3service;

	/** Log instance. */
	private static final Logger LOGGER = LoggerFactory.getLogger(FirstStepTasklet.class);

	/** The valid line pattern. */
	private static Pattern validLinePattern = Pattern.compile("\\d{18}");

	/** The input file path. */
	private String inputFilePath;

	/** The customer client map. */
	private Map<String, Set<String>> customerClientMap = new HashMap<>(100000);

	@Autowired
	private InputDataHolder inputDataHoler;

	/**
	 * Instantiates a new first step processor.
	 *
	 * @param inputFileName the input file name
	 */
	public FirstStepTasklet(String inputFileName)
	{
		inputFilePath = inputFileName;
	}
//	public void setInputBucket(String inputBucket) { this.inputBucket = inputBucket;}
//	public void setInputKey(String inputKey) {this.inputKey = inputKey;}
//
//	public void setS3Service(S3Service s3Service) {
//		this.s3service = s3Service;
//	}

	/* (non-Javadoc)
	 * @see org.springframework.batch.core.step.tasklet.Tasklet#execute(org.springframework.batch.core.StepContribution, org.springframework.batch.core.scope.context.ChunkContext)
	 */
	@Override
	public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception
	{
//		try{
////			LOGGER.info("Downloading s3://{}/{} ->{}",inputBucket,inputKey,inputFilePath);
////			s3service.read(inputBucket,inputKey);
//		} catch (Exception e) {
//			LOGGER.error("Failed downloading inputFile from s3",e);
//			return RepeatStatus.FINISHED;
//		}
		LineNumberReader lineReader = null;
		try
		{
			lineReader = new LineNumberReader(new FileReader(inputFilePath));
		}
		catch (FileNotFoundException e)
		{
			LOGGER.error("Input file not found! File path: {}", inputFilePath);
			return RepeatStatus.FINISHED;
		}

		groupCustomerFromFile(lineReader);
		lineReader.close();
		List<Map.Entry<String, Set<String>>> customerToClientIdsList = customerClientMap.entrySet().stream().collect(Collectors.toList());
		inputDataHoler.setCustomerToClientIdsList(customerToClientIdsList);

		StepExecution stepExecution = chunkContext.getStepContext().getStepExecution();
		stepExecution.setReadCount(customerToClientIdsList.size());
		stepExecution.setWriteCount(customerToClientIdsList.size());
		LOGGER.info("Number of customers: {}", customerToClientIdsList.size());

		return RepeatStatus.FINISHED;
	}

	/**
	 * Group customer from file.
	 *
	 * @param lineReader the line reader
	 * @return the map
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	protected Map<String, Set<String>> groupCustomerFromFile(LineNumberReader lineReader) throws IOException
	{
		String textLine = lineReader.readLine();
		while ( textLine != null )
		{
			textLine = textLine.trim();
			if ( isValidLine(textLine) )
			{
				String clientId = textLine.substring(0, 9);
				String customerId = textLine.substring(9, 18);
				Set<String> clientIdSet = customerClientMap.get(customerId);
				if ( clientIdSet == null )
				{
					clientIdSet = new HashSet<>();
					customerClientMap.put(customerId, clientIdSet);
				}

				clientIdSet.add(clientId);
			}
			else {
				LOGGER.warn("An invalid line at input file! Line number: {}", lineReader.getLineNumber());
			}

			textLine = lineReader.readLine();
		}

		return customerClientMap;
	}

	/**
	 * Checks if is valid line.
	 *
	 * @param textLine the text line
	 * @return true, if is valid line
	 */
	private boolean isValidLine(String textLine)
	{
		return  validLinePattern.matcher(textLine).matches();
	}


}
