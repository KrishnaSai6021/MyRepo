/*
 * Copyright 2018, FMR LLC.
 * All Rights Reserved.
 * Fidelity Confidential Information
 */
package com.fmr.batch.ecp.processor;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import com.fmr.batch.ecp.service.S3Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.beans.factory.annotation.Value;
import com.fmr.batch.ecp.constant.ECPBatchConstant;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.AmazonServiceException;

/**
 * The Class FirstStepProcessor.
 */
@Component
@StepScope
public class FirstStepTasklet implements Tasklet
{
	private String inputBucket;
	private String inputKey;
	
	@Autowired
	private S3Service s3Service;

	/** Log instance. */
	private static final Logger LOGGER = LoggerFactory.getLogger(FirstStepTasklet.class);

	/** The valid line pattern. */
	private static Pattern validLinePattern = Pattern.compile("\\d{18}");

	/** The input file path. */
	private String inputFilePath = ECPBatchConstant.ECP_FEED_FILE;

	/** The customer client map. */
	private Map<String, Set<String>> customerClientMap = new HashMap<>(100000);

	@Autowired
	private InputDataHolder inputDataHolder;

	@Value("#{jobParameters['bucket']}")
    private String jobBucket;

    @Value("#{jobParameters['key']}")
    private String jobKey;

//	public void setInputBucket(String inputBucket) { this.inputBucket = inputBucket;}
//	public void setInputKey(String inputKey) {this.inputKey = inputKey;}
//
//	public void setS3Service(S3Service s3Service) {
//		this.s3service = s3Service;
//	}

	/* (non-Javadoc)
	 * @see org.springframework.batch.core.step.tasklet.Tasklet#execute(org.springframework.batch.core.StepContribution, org.springframework.batch.core.scope.context.ChunkContext)
	 */
	@Override
	public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception
	{
//		try{
////			LOGGER.info("Downloading s3://{}/{} ->{}",inputBucket,inputKey,inputFilePath);
////			s3service.read(inputBucket,inputKey);
//		} catch (Exception e) {
//			LOGGER.error("Failed downloading inputFile from s3",e);
//			return RepeatStatus.FINISHED;
//		}

		copyFeedFiletoLocal(jobBucket, jobKey);
		LineNumberReader lineReader = null;
		
		try
		{
			lineReader = new LineNumberReader(new FileReader(inputFilePath));
		}
		catch (FileNotFoundException e)
		{
			LOGGER.error("Input file not found! File path: {}", inputFilePath);
			return RepeatStatus.FINISHED;
		}

		groupCustomerFromFile(lineReader);
		lineReader.close();
		List<Map.Entry<String, Set<String>>> customerToClientIdsList = customerClientMap.entrySet().stream().collect(Collectors.toList());
		inputDataHolder.setCustomerToClientIdsList(customerToClientIdsList);

		StepExecution stepExecution = chunkContext.getStepContext().getStepExecution();
		stepExecution.setReadCount(customerToClientIdsList.size());
		stepExecution.setWriteCount(customerToClientIdsList.size());
		LOGGER.info("Number of customers: {}", customerToClientIdsList.size());

		return RepeatStatus.FINISHED;
	}

	/**
	 * Group customer from file.
	 *
	 * @param lineReader the line reader
	 * @return the map
	 * @throws IOException Signals that an I/O exception has occurred.
	 */
	protected Map<String, Set<String>> groupCustomerFromFile(LineNumberReader lineReader) throws IOException
	{
		String textLine = lineReader.readLine();
		while ( textLine != null )
		{
			textLine = textLine.trim();
			if ( isValidLine(textLine) )
			{
				String clientId = textLine.substring(0, 9);
				String customerId = textLine.substring(9, 18);
				Set<String> clientIdSet = customerClientMap.get(customerId);
				if ( clientIdSet == null )
				{
					clientIdSet = new HashSet<>();
					customerClientMap.put(customerId, clientIdSet);
				}

				clientIdSet.add(clientId);
			}
			else {
				LOGGER.warn("An invalid line at input file! Line number: {}", lineReader.getLineNumber());
			}

			textLine = lineReader.readLine();
		}

		return customerClientMap;
	}

	/**
	 * Checks if is valid line.
	 *
	 * @param textLine the text line
	 * @return true, if is valid line
	 */
	private boolean isValidLine(String textLine)
	{
		return  validLinePattern.matcher(textLine).matches();
	}

	private void copyFeedFiletoLocal(String inputBucket, String inputKey) {
		S3Object s3 = null;
		
		try {
			s3 = this.s3Service.read(inputBucket, inputKey);
			if (s3 == null) {
                throw new IllegalStateException("S3 object is null for bucket=" + inputBucket + ", key=" + inputKey);
            }
		} catch (AmazonServiceException e) {
			LOGGER.error("Error reading feed file from s3.", e);
		} catch (Exception e) {
			LOGGER.error("Error reading feed file from s3 bucket.", e);
		}

		try (BufferedReader reader = new BufferedReader(new InputStreamReader(s3.getObjectContent()));
			BufferedWriter writer = new BufferedWriter(new FileWriter(ECPBatchConstant.ECP_FEED_FILE))) {
			String line;
			while ((line = reader.readLine()) != null) {
				writer.write(line);
				writer.newLine();
			}
		} catch(IOException e) {
			LOGGER.error("Error while reading feed file contents from S3 and writing locally.", e);
		}
	}
}
